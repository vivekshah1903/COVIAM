(function() {
    'use strict';

    angular.module('app.notify').controller('NotificationCreateCtrl', notificationCreateCtrl);

    notificationCreateCtrl.$inject = ['$scope', 'notificationService', '$location', 'sessionService','ModalService','utils','CONFIG', '$timeout'];

    //Controller implementation
    function notificationCreateCtrl($scope, notificationService, $location,sessionService , ModalService,utils,CONFIG, $timeout) {
        var vm = this;
        vm.dashDatePicker = dashDatePicker;
        vm.createNotification = createNotification;
        vm.validFromCheck = validFromCheck;
        vm.openDashDatePicker = openDashDatePicker;
        vm.publishDateValidate = publishDateValidate;

        vm.getCategory=getCategory;
        vm.getPriority=getPriority;

        vm.cancelNotification= cancelNotification;
        vm.userdata = sessionService.getUserDetails('USER');

        var currentDate = new Date();
        var defaultTime = "2017-06-01T18:30:37.172Z"

        vm.options = {
            minDate: currentDate
        }
        vm.publishoptions = {
            minDate: currentDate
        }

        vm.data = {
            validFrom: currentDate,
            validTo: currentDate,
            notificationPublishDt: currentDate,
            endTime:defaultTime,
            startTime:defaultTime

        }
        publishDateValidate();
        getCategory();
        getPriority();
        getLocation();
        function getCategory(){
            return notificationService.getCategoryList().then(function(data) {
                 vm.CategoryData=data.dto;
                 
            });
        }

        function getPriority(){
            return notificationService.getPriorityList().then(function(data) {
                vm.PriorityData=data.dto;
              
            });
        }
        function getLocation(){
            return notificationService.getLocationList().then(function(data) {
                vm.LocationData=data.businessLocationList;
                
            });
        }

        function dashDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from') {
                am.from = !(am.opened);
            }
        }

        function publishDateValidate() {
            vm.publishoptions = {
                maxDate: vm.data.validTo,
                minDate: currentDate
            }
        }

        function validFromCheck(valueA, valueB) {
            vm.dateError = false;
            if (!valueA || !valueB) {
                vm.dateError = false;
                return;
            }
            (valueA > valueB) ? vm.dateError = true: vm.dateError = false;


        }

        function openDashDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from1') {
                am.from1 = !(am.opened);
            }
        }

        function createNotification(data) {
           // var businessLocation = [data.Location];
    
            var startTime = utils.getinDateFormat(data.startTime, CONFIG.SYSTEM_DATE_FORMAT.NOTIFY_TIME_FORMAT);
            var endTime = utils.getinDateFormat(data.endTime, CONFIG.SYSTEM_DATE_FORMAT.NOTIFY_TIME_FORMAT);
            var publishDate = utils.getinDateFormat(data.notificationPublishDt, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            var notifyEndDate = utils.getinDateFormat(data.validTo, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            var notifyStartDate = utils.getinDateFormat(data.validFrom, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            var obj = {
                acf2Id:vm.userdata.acf2Id,
                categoryId: data.category,
                priorityId: data.priority,
                notificationTxt: data.description,
                expiryDt: notifyEndDate,
                startTime: startTime,
                expiryTime: endTime,
                startDt: notifyStartDate,
                publishDt: publishDate,
                businessLocation:  data.Location

            }
            var fileObj = {
                file: data.filename
            }
            var message = "The notification is created and will become active on the published date"
          
            ModalService.openAlert('confirm', 'Create Notification', message, $scope, 'reset');
            $scope.$on('resetOk', function() {
                return notificationService.createNotificationData(obj,fileObj).then(function(notificationData) {
                    if (notificationData.data.result == "SUCCESS") {
                        vm.apisAlert = {
                            toggle: true,
                            message: notificationData.data.message || 'Internal Server Error',
                            type: "SUCCESS"
                        };
                        $timeout(function() {
                            vm.apisAlert.toggle = false;
                             $location.path("/notifications");
                        }, 5000);
                        return;
                    } else {

                    }
                });
                $scope.$on('resetCancel', function() {
                  
                });
            });
        }
         function cancelNotification() {
                var message = "Do you want to cancel creating this notification ?"
                   
                ModalService.openAlert('confirm', 'Cancel Notification', message, $scope, 'reset');
                $scope.$on('resetOk', function() {
                    $location.path("/notifications");

                });


                $scope.$on('resetCancel', function() {
                   
                });
            }

    }


})();

// nottificationtable controller
