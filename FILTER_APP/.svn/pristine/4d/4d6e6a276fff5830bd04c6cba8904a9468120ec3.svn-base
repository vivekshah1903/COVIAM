(function() {
    'use strict';

    angular.module('app.events').controller('EventCtrl', eventCtrl);

    eventCtrl.$inject = ['eventService', '$scope', 'sessionService', 'utils', 'CONFIG'];

    //Controller implementation
    function eventCtrl(eventService, $scope, sessionService, utils, CONFIG) {
        var vm = this;

        vm.dashDatePicker = dashDatePicker;
        vm.validFromCheck = validFromCheck;
        vm.getEventDetails = getEventDetails;
        vm.openDatePicker = openDatePicker;
        vm.publishDateValidate=publishDateValidate;
        vm.modalOk = modalOk;


        var d = new Date(); // today!

        vm.options = {
            minDate: d
        }
        vm.data = {
            validFrom: d,
            validFrom1: d,
            validTo: d
        }

        function publishDateValidate() {
            vm.publishoptions = {
                maxDate: vm.data.validTo
            }
        }

        function dashDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from') {
                am.from = !(am.opened);
            }
        }

        function openDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from1') {
                am.from1 = !(am.opened);
            }
        }



        function validFromCheck(valueA, valueB) {
            vm.dateError = false;
            if (!valueA || !valueB) {
                vm.dateError = false;
                return;
            }
            (valueA > valueB) ? vm.dateError = true: vm.dateError = false;


        }


        function getEventDetails(data) {
            console.log(data);
            vm.validfromdate = data.validFrom;
            vm.validtodate = data.validTo;
            vm.validfromdate = utils.getinDateFormat(vm.validfromdate, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            vm.validtodate = utils.getinDateFormat(vm.validtodate, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            var obj = {
                "eventsDateType": data.datetype,
                "fromDate": vm.validfromdate,
                "pageno": 0,
                "toDate": vm.validtodate
            }

            return eventService.getEventSummaryData(obj).then(function(eventData) {
                if (eventData.message == "No Record Found") {
                    return;
                } else {
                    vm.eventSummary.options.data = eventData.events;
                }

            });
        }



        $scope.categories = [{ "name": "All" }, { "name": "ASCI" }, { "name": "ASCP" }, { "name": "Indore" }];
        /*$scope.question = {
            questionText: "This is a test question.",
            choices: [{
                id: 1,
                text: "Internal",
                isUserAnswer: false
            }, {
                id: 2,
                text: "External",
                isUserAnswer: true
            }]
        };*/

        function modalOk(data) {

            console.log("Modal Ok", data);
        }


        vm.eventSummary = {
            options: {

                cache: false,
                //height: 600,
                striped: true,
                pagination: true,
                pageSize: 10,
                pageList: [5, 10, 25, 50, 100, 200],
                search: true,
                showColumns: false,
                showRefresh: false,
                showExport: false,
                filterControl: true,
                minimumCountColumns: 2,
                clickToSelect: false,
                showToggle: false,
                toolbar: "#toolbar",
                maintainSelected: true,
                columns: [{
                        field: 'state',
                        checkbox: true,
                        align: 'center',
                        valign: 'middle'
                    }, {
                        title: 'Event Name',
                        field: 'eventName',

                        align: 'center',
                        valign: 'middle',
                        sortable: true,
                        "formatter": eventNameFormatter


                    }, {
                        title: 'Business Location',
                        field: 'businessLocation',
                        filterControl: 'select',
                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Event Location',
                        field: 'eventLocation',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Start Date',
                        field: 'eventStartDate',

                        align: 'center',
                        valign: 'middle',
                        sortable: true,
                        "formatter": startDateFormatter

                    }, {
                        title: 'End Date',
                        field: 'eventEndDate',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Status',
                        field: 'eventStatus',
                        align: 'center',
                        valign: 'middle',
                        sortable: true,
                        "formatter": statusFormatter

                    }, {
                        title: 'Event Type',
                        field: 'eventType',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Organized by',
                        field: 'organizedBy',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Publish Date',
                        field: 'publishDate',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Created by',
                        field: 'createdBy',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Created date',
                        field: 'createdDate',

                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }, {
                        title: 'Action',
                        field: 'cretedDate',
                        "formatter": actionFormatter,
                        align: 'center',
                        valign: 'middle',
                        sortable: true

                    }


                ]

            }
        };

        function statusFormatter(value, row, index) {

            if (row.eventStatus == "Expired") {
                return [
                    '<a class="like pst-rel" href="javascript:void(0)">',
                    '<i   class="glyphicon glyphicon-remove"></i>',
                    '<span class="tooltiptext">Expired</span>',
                    '</a> '

                ].join('');
            } else if (row.eventStatus == "Active") {
                return [
                    '<a class="like pst-rel" href="javascript:void(0)" class="pst-rel">',
                    '<i   class="glyphicon glyphicon-ok"></i>',
                    '<span class="tooltiptext">Active</span>',
                    '</a> '

                ].join('');
            } else if (row.eventStatus == "Upcoming") {
                return [
                    '<a class="like pst-rel" href="javascript:void(0)" class="pst-rel">',
                    '<i   class="glyphicon glyphicon-hourglass"></i>',
                    '<span class="tooltiptext">In progress</span>',
                    '</a> '

                ].join('');
            }
        }

        function eventNameFormatter(value, row, index) {
            return '<a class="pst-rel undrline-txt event-des">' + value +

                '<div class="tooltiptext">' + '<h5>' + '<span class="tooltip-txt">' + row.eventDesc + '</h5>' + '</div>' + '</a>';
        }

        function startDateFormatter(value, row, index) {
            vm.date = row.eventStartDate;
            vm.date = utils.getinDateFormat(vm.date, CONFIG.SYSTEM_DATE_FORMAT.DATE_FORMAT);
            return vm.date;
        }

        function actionFormatter(value, row, index) {
            return [
                '<a class="like" href="javascript:void(0)">',
                '<i class="glyphicon glyphicon-film"></i>',
                '</a>  ',
                '<a class="remove" href="javascript:void(0)">',
                '<i class="glyphicon glyphicon-pencil"></i>',
                '</a>'
            ].join('');
        }

    } //EOF CategoryCtrl
})();
