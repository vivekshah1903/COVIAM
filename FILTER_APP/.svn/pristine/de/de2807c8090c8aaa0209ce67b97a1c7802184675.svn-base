(function() {
    'use strict';

    angular.module('app.events').controller('EventEditCtrl', eventeditCtrl);

    eventeditCtrl.$inject = ['eventService', '$scope', 'sessionService', 'utils', 'CONFIG', 'ModalService', '$state', '$stateParams'];

    //Controller implementation
    function eventeditCtrl(eventService, $scope, sessionService, utils, CONFIG, ModalService, $state, $stateParams) {
        var vm = this;
        console.log("setting", $stateParams);
        vm.edit = $stateParams.obj;
        console.log(vm.edit);
        vm.dashDatePicker = dashDatePicker;
        vm.validFromCheck = validFromCheck;
        vm.getEventDetails = getEventDetails;
        vm.openDatePicker = openDatePicker;
        vm.publishDateValidate = publishDateValidate;
        //vm.modalOk = modalOk;
        vm.editEvent = editEvent;



        if (vm.edit && vm.edit.eventLocationInd == false) {
            vm.edit.venue =  'External';
        } else if(vm.edit && vm.edit.eventLocationInd == true) {
            vm.edit.venue =  'Internal';
        }


        var d = new Date(); // today!

        vm.options = {
            minDate: d
        }
        vm.data = {
            startDate: d,
            endDate: d,
            publishDate: d,
            event_audience: "All Staff"
        }

        function publishDateValidate() {
            vm.publishoptions = {
                maxDate: vm.data.endDate
            }
        }

        function dashDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from') {
                am.from = !(am.opened);
            }
        }

        function openDatePicker(opened, value) {
            var am = this;
            if (value == 'to') {
                am.to = !(am.opened);
            }
            if (value == 'from1') {
                am.from1 = !(am.opened);
            }
        }



        function validFromCheck(valueA, valueB) {
            vm.dateError = false;
            if (!valueA || !valueB) {
                vm.dateError = false;
                return;
            }
            (valueA > valueB) ? vm.dateError = true: vm.dateError = false;


        }

        function editEvent(edit) {
            console.log(edit);
            /*var eventEndDate = data.endDate;
            var eventStartDate = data.startDate;*/

            var eventStartTime = "4:00 PM"; /*utils.getinDateFormat(data.startTime, CONFIG.SYSTEM_DATE_FORMAT.TIME_FORMAT);*/
            var eventEndTime = "8:00 PM"; /*utils.getinDateFormat(data.endTime, CONFIG.SYSTEM_DATE_FORMAT.TIME_FORMAT);*/
            var publishDate = "2016-12-06"; /*utils.getinDateFormat(data.publishDate, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);*/
            var eventEndDate = "2016-12-06"; /*utils.getinDateFormat(data.endDate, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);*/
            var eventStartDate = "2016-12-06"; /*utils.getinDateFormat(data.startDate, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);*/
            var obj = {
                audience: vm.data.event_audience,
                businessLocation: [
                    "ASC, India"
                ],
                eventId: vm.edit.eventId,
                eventDesc: edit.eventDesc,
                eventEndDate: eventEndDate,
                eventEndTime: eventEndTime,
                eventExternalLocation: edit.venue_name,
                eventName: edit.eventName,
                eventStartDate: eventStartDate,
                eventStartTime: eventStartTime,
                organizedBy: edit.organizedBy,
                publishDate: publishDate,
                venue: edit.inetrnal
            }
            var message = "The Event is created and will become active on the published date"
            console.log("Request", obj);
            ModalService.openAlert('confirm', 'Create Event', message, $scope, 'reset');
            $scope.$on('resetOk', function() {
                return eventService.createEventData(obj).then(function(eventData) {
                    if (eventData.message == "No Record Found") {
                        return;
                    } else {
                        // vm.eventSummary.options.data = eventData.events;
                    }

                });

            });
            $scope.$on('resetCancel', function() {
                console.log("No");
            });
            /* return eventService.createEventData(obj).then(function(eventData) {
                 if (eventData.message == "No Record Found") {
                     return;
                 } else {
                    // vm.eventSummary.options.data = eventData.events;
                 }

             });*/
        }

        function getEventDetails(data) {
            console.log(data);
            /*vm.validfromdate = data.validFrom;
            vm.validtodate = data.validTo;*/
            vm.validfromdate = utils.getinDateFormat(data.validFrom, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            vm.validtodate = utils.getinDateFormat(data.validTo, CONFIG.SYSTEM_DATE_FORMAT.DATE_YEAR_FORMAT);
            var obj = {
                "eventsDateType": data.datetype,
                "fromDate": vm.validfromdate,
                "pageno": 0,
                "toDate": vm.validtodate
            }

            return eventService.getEventSummaryData(obj).then(function(eventData) {
                if (eventData.message == "No Record Found") {
                    return;
                } else {
                    vm.eventSummary.options.data = eventData.events;
                }

            });
        }



        $scope.categories = [{ "name": "All" }, { "name": "ASCI" }, { "name": "ASCP" }, { "name": "Indore" }];
        /*$scope.question = {
            questionText: "This is a test question.",
            choices: [{
                id: 1,
                text: "Internal",
                isUserAnswer: false
            }, {
                id: 2,
                text: "External",
                isUserAnswer: true
            }]
        };*/

        /*function modalOk(data) {

            console.log("Modal Ok", data);
        }
*/

    } //EOF CategoryCtrl
})();
